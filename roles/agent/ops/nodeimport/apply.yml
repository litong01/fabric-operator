# To import external nodes into your clusters
#
# - name: nodeimport
#   description: import node access point and various certificates
#     into this cluster
#   params:
#   - name: assetname
#     value: assets.zip
#
#  assetname is the tar or zip file file name which contains all the asset files
#  this file must be uploaded to the controller prior executing this
#  command.

- name: Show the passed in variable
  debug:
    var: action

- name: Get variable with their names
  set_fact:
    assetname: >-
      {{ (action.params | selectattr('name','equalto','assetname') | map(attribute='value') | list)[0] }}

- name: End the process if asset name was not provided
  when: assetname == ''
  include_tasks: '{{ role_path }}/common/endplay.yml'
  vars:
    RESULT_MSG: 'Failed - asset zip file name must be provided for node import'

- name: Setup upload dir
  set_fact:
    targetdir: "{{ lookup('env','HOME') }}/agent/upload"

- name: Make sure that asset target directory exists
  file:
    path: '{{ targetdir }}'
    state: 'directory'
    mode: 0775

- name: Get the pod name
  set_fact:
    podname: "{{ lookup('env', 'HOSTNAME') }}"
    controllerns: "{{ lookup('file', '/var/run/secrets/kubernetes.io/serviceaccount/namespace') }}"

- name: Check if the indicated file exists
  stat:
    path: '{{ targetdir }}/{{ assetname }}'
  register: assetfile

- name: End the process if file does not exist
  when: not assetfile.stat.exists
  include_tasks: '{{ role_path }}/common/endplay.yml'
  vars:
    RESULT_MSG: 'Failed - asset zip file does not exist, upload first'
    UPLOADLOAD_MSG: >-
      kubectl cp {{ assetname }} -n {{ controllerns }} -c manager
      {{ podname }}:{{ targetdir }}/{{ assetname }}

- name: Unpackage all the assets to the work directory
  unarchive:
    src: '{{ targetdir }}/{{ assetname }}'
    dest: "{{ agentworkdir }}"

- name: Recursively find all the asset files
  find:
    paths: "{{ agentworkdir }}"
    patterns: '*.json'
    recurse: yes
    file_type: file
  register: allassets

- name: Process all the uploaded assets
  include_tasks: 'doresource.yml'
  loop: "{{ allassets.files }}"
  loop_control:
    loop_var: asset

- name: Update the crd status
  include_tasks: '{{ role_path }}/common/endplay.yml'
  vars:
    RESULT_MSG: 'Succeeded - Assets have been imported'
