# To create a new channel, an action must look like this
#
# - name: channelcreate
#   description: Create new channel
#   actions:
#   - name: channelcreate
#     description: Create new channel
#     parameters:
#       channelName: mychannel
#       ordererNode: orderer-sample
#       additionalOrgs:
#       - org0-example-com-msp-asset
#       - org1-example-com-msp-asset
#
# The ordererNode node has to be running in the cluster, that means
# the channel can only be created locally to the cluster, only the owning
# organization of the orderer node can create the new channel.
# Both parameters are required

- name: Get variable with their names
  set_fact:
    channelName: "{{ action.parameters.channel_name }}"
    ordererNode: "{{ action.parameters.orderer_node }}"
    additionalOrgs: "{{ action.parameters.additional_orgs }}"

- name: End the process if either variable is empty
  when: channelName == '' or ordererNode == ''
  include_tasks: '{{ role_path }}/common/endplay.yml'
  vars:
    RESULT_MSG: 'Failed - Both channel name and orderer node must be provided'

- name: Fixup the orderer name in case only the short name used
  when: not (orgid in (ordererNode))
  set_fact:
    ordererNode: "{{ ordererNode }}-{{ orgid }}"

- name: Layout orderer node certs based on the secret
  include_tasks: '{{ role_path }}/common/getnodeinfo.yml'
  vars:
    thesecretname: "{{ ordererNode }}"

- name: Copy original config to working directory
  copy:
    src: '{{ bindir }}/config'
    dest: '{{ agentworkdir }}'

# Getting additional orgs certs
- name: Layout additional org certs
  when: additionalOrgs|length > 0
  include_tasks: '{{ role_path }}/common/getnodeinfo.yml'
  loop: '{{ additionalOrgs }}'
  loop_control: 
    loop_var: thesecretname

- name: Get orderer node admin endpoint
  set_fact:
    ordererid: "{{ lookup('file', agentworkdir+'/'+ordererNode+'/msp/id.json') | from_json }}"

- name: Setup configtx file
  template:
    src: '{{ role_path }}/ops/{{ action.name }}/templates/configtx.j2'
    dest: '{{ agentworkdir }}/config/configtx.yaml'

- name: 'Now create the genesis block for the channel {{ channelName }}'
  ansible.builtin.shell: |
    export FABRIC_CFG_PATH={{ agentworkdir }}/config
    {{ bindir }}/bin/configtxgen -profile ApplicationGenesis \
    -outputBlock newc.bk -channelID {{ channelName }}
  args:
    chdir: '{{ agentworkdir }}/config'
    executable: /bin/bash
  register: cmdresult
  ignore_errors: yes

- name: Update the resource status
  when: cmdresult.rc != 0
  include_tasks: '{{ role_path }}/common/endplay.yml'
  vars:
    RESULT_MSG: "Failed - {{ cmdresult.stderr }}"

- name: 'Join the orderer node to the channel {{ channelName }}'
  ansible.builtin.shell: |
    export FABRIC_CFG_PATH={{ agentworkdir }}/config
    {{ bindir }}/bin/osnadmin channel join --channelID {{ channelName }} \
    -o {{ ordererid.adminendpoint }} \
    --config-block newc.bk --ca-file ../{{ ordererNode }}/tls/ca.crt \
    --client-cert ../{{ ordererNode }}/tls/client.crt \
    --client-key ../{{ ordererNode }}/tls/client.key
  args:
    chdir: '{{ agentworkdir }}/config'
    executable: /bin/bash
  register: cmdresult
  ignore_errors: yes

- name: Update the resource status
  include_tasks: '{{ role_path }}/common/endplay.yml'
  vars:
    RESULT_MSG: >-
      {{ (cmdresult.rc == 0)|ternary('Succeeded - Channel '+channelName+' was created',
         'Failed - '+cmdresult.stderr) }}
