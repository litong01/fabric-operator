# To generate the asset file for console import
#
# spec:
#   organization: example.com
#   actions:
#   - name: assetgen
#     description: Generate asset file
#     parameters:
#       assettypes: ['ca', 'orderer', 'peer']
#       includewallets: no
#       channelName: 'mychannel'
#
#  assettypes indicate what resource wanting to be included in the exported file
#  includewallets indicates if the admin wallets should also be included

- name: Get variable with their names
  set_fact:
    assettypes: "{{ action.parameters.assettypes }}"
    includewallets: "{{ action.parameters.includewallets }}"
    channelName: "{{ action.parameters.channel_name | default('mychannel') }}"

- name: Fail the process if asset types are not provided
  when: (assettypes | length) == 0
  include_tasks: '{{ ROOTDIR }}/playbooks/common/endplay.yml'
  vars:
    RESULT_MSG: 'Failed - no assets to be exported'

- name: Mark the start of the agent
  include_tasks: '{{ ROOTDIR }}/playbooks/common/startplay.yml'
  vars:
    KIND: Agent

- name: Filter out the invalid items
  set_fact:
    alltypes: "{{ (alltypes|default([])) + [item] }}"
  when: (item | title) in ('Ca', 'Orderer', 'Peer') 
  with_items: "{{ assettypes }}"

- name: Execute the action
  include_tasks: 'getresources.yml'
  loop: "{{ ['Console'] + alltypes }}"
  loop_control:
    loop_var: restype

- name: Package all the assets to one file
  archive:
    path: "{{ agentworkdir }}/assets"
    dest: "{{ downloaddir }}/{{ orgid }}-assets.zip"
    format: zip

- name: Copy the asset file to the uplod directory for further process
  copy:
    src: "{{ downloaddir }}/{{ orgid }}-assets.zip"
    dest: "{{ uploaddir }}/{{ orgid }}-assets.zip"

- name: Update the crd status
  include_tasks: '{{ ROOTDIR }}/playbooks/common/endplay.yml'
  vars:
    RESULT_MSG: 'Succeeded - Asset Generation'
    DOWNLOAD_MSG: >-
      kubectl cp -n {{ controllerns }} -c manager
      {{ podname }}:{{ downloaddir }}/{{ orgid }}-assets.zip
