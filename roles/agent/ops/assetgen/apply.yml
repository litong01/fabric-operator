# To generate the asset file for console import
#
# spec:
#   organization: example.com
#   actions:
#   - name: assetgen
#     description: Generate asset file
#     parameters:
#       assettypes: ['ca', 'orderer', 'peer']
#       includewallets: no
#
#  assettypes indicate what resource wanting to be included in the exported file
#  includewallets indicates if the admin wallets should also be included

- name: Get variable with their names
  set_fact:
    assettypes: "{{ action.parameters.assettypes }}"
    includewallets: "{{ action.parameters.includewallets }}"

- name: Fail the process if asset types are not provided
  when: (assettypes | length) == 0
  include_tasks: '{{ role_path }}/common/endplay.yml'
  vars:
    RESULT_MSG: 'Failed - no assets to be exported'

- name: Filter out the invalid items
  set_fact:
    alltypes: "{{ (alltypes|default([])) + [item] }}"
  when: (item | title) in ('Ca', 'Orderer', 'Peer') 
  with_items: "{{ assettypes }}"

- name: Execute the action
  include_tasks: 'getresources.yml'
  loop: "{{ ['Console'] + alltypes }}"
  loop_control:
    loop_var: restype

- name: Setup destination dir
  set_fact:
    targetdir: "{{ lookup('env','HOME') }}/agent/download"

- name: Make sure that asset target directory exists
  file:
    path: '{{ targetdir }}'
    state: '{{ item }}'
    mode: 0775
  with_items:
  - 'absent'
  - 'directory'

- name: Package all the assets to one file
  archive:
    path: "{{ agentworkdir }}/assets"
    dest: "{{ targetdir }}/{{ orgid }}-assets.zip"
    format: zip

- name: Get the pod name
  set_fact:
    podname: "{{ lookup('env', 'HOSTNAME') }}"
    controllerns: "{{ lookup('file', '/var/run/secrets/kubernetes.io/serviceaccount/namespace') }}"

- name: Update the crd status
  include_tasks: '{{ role_path }}/common/endplay.yml'
  vars:
    RESULT_MSG: 'Succeeded'
    DOWNLOAD_MSG: >-
      kubectl cp -n {{ controllerns }} -c manager
      {{ podname }}:{{ targetdir }}/{{ orgid }}-assets.zip
