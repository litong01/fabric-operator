# To create a new channel, an action must look like this
#
# - name: channelcreate
#   description: Create new channel
#   params:
#   - name: channelName
#     value: mychannel
#   - name: ordererNode
#     value: orderer-sample
#
# The initialOrdererNode's node secret has to be available
# on the cluster.

- name: Show the passed in variable
  debug:
    var: action

- name: Get variable with their names
  set_fact:
    channelName: >-
      {{ (action.params | selectattr('name','equalto','channelName') | map(attribute='value') | list)[0] }}
    ordererNode: >-
      {{ (action.params | selectattr('name','equalto','ordererNode') | map(attribute='value') | list)[0] }}

- name: Fail the process if either variable is empty
  fail:
    msg: 'Both channel name and initial orderer node must be provided'
  when: channelName == '' or ordererNode == ''

- name: Search for the orderer matching node cert secret
  community.kubernetes.k8s_info:
    kind: Secret
    api_version: v1
    name: '{{ ordererNode }}-{{ orgid }}-nodecert'
    namespace: '{{ ansible_operator_meta.namespace }}'
  register: nodecert_secret

- name: Fail the process if there is no orderer secret found
  fail:
    msg: 'Cannot find the orderer node {{ ordererNode }} certificates.'
  when: (nodecert_secret.resources|length) == 0

- name: Search for the orderer node
  community.kubernetes.k8s_info:
    kind: Orderer
    api_version: 'operator.fabric.hyperledger.org/v1alpha1'
    name: '{{ ordererNode }}'
    namespace: '{{ ansible_operator_meta.namespace }}'
  register: orderernode

- name: Fail the process if there is no orderer node found
  fail:
    msg: 'Cannot find the orderer node {{ ordererNode }}.'
  when: (orderernode.resources|length) == 0

- name: Get the orderer node endpoints
  set_fact:
    endpoint: '{{ orderernode.resources[0].status.endpoint }}'
    adminendpoint: '{{ orderernode.resources[0].status.adminendpoint }}'

- name: Get certs directory set up
  file:
    path: '{{ workdir }}/{{ orgid }}/{{ item }}'
    state: 'directory'
    mode: 0775
  with_items:
  - 'config'
  - 'config/msp'
  - 'config/msp/cacerts'
  - 'config/msp/tlscacerts'
  - 'config/msp/keystore'
  - 'config/msp/signcerts'
  - 'config/tls'

- name: Write certs to the correct location
  copy:
    content: '{{ nodecert_secret.resources[0].data[item.src]|b64decode }}'
    dest: '{{ workdir }}/{{ orgid }}/config/{{ item.dest }}'
  with_items:
  - "{{ { 'src': 'ca.crt',    'dest': 'msp/cacerts/ca.pem'} }}"
  - "{{ { 'src': 'tlsca.crt', 'dest': 'msp/tlscacerts/ca.crt'} }}"
  - "{{ { 'src': 'admin.crt', 'dest': 'msp/signcerts/admin.crt'} }}"
  - "{{ { 'src': 'admin.key', 'dest': 'msp/keystore/priv_sk'} }}"
  - "{{ { 'src': 'tlsca.crt', 'dest': 'tls/ca.crt'} }}"
  - "{{ { 'src': 'tls.crt',   'dest': 'tls/server.crt'} }}"
  - "{{ { 'src': 'tls.key',   'dest': 'tls/server.key'} }}"
  - "{{ { 'src': 'config.yaml', 'dest': 'msp/config.yaml'} }}"

- name: 'Now create the genesis block for the channel {{ channelName }}'
  ansible.builtin.shell: |
    export FABRIC_CFG_PATH={{ workdir }}/{{ orgid }}/config
  args:
    chdir: '{{ workdir }}/{{ orgid }}/config'
    executable: /bin/bash

