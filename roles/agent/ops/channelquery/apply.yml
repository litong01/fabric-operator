# To create a new channel, an action must look like this
#
# - name: channelquery
#   description: query channel configuration
#   params:
#   - name: channelName
#     value: mychannel
#   - name: ordererNode
#     value: orderer-sample
#
# The operation will look at the orderer nodecert first, if not found
# it will try to find node asset to get endpoint and certificates.
# either the short orderer node name or the full orderer name can be
# used

- name: Show the passed in variable
  debug:
    var: action

- name: Get variable with their names
  set_fact:
    channelName: >-
      {{ (action.params | selectattr('name','equalto','channelName') | map(attribute='value') | list)[0] }}
    ordererNode: >-
      {{ (action.params | selectattr('name','equalto','ordererNode') | map(attribute='value') | list)[0] }}

- name: End the process if either variable is empty
  when: channelName == '' or ordererNode == ''
  include_tasks: '{{ role_path }}/common/endplay.yml'
  vars:
    RESULT_MSG: 'Failed - Both channel name and initial orderer node must be provided'

- name: Fixup the orderer name in case only the short name used
  when: not (orgid in (ordererNode|replace('.','-')))
  set_fact:
    ordererNode: "{{ ordererNode|replace('.','-') }}-{{ orgid }}"

# Now we get the nodecert under which the operation is performed
- name: Get user info
  include_tasks: '{{ role_path }}/common/getuserinfo.yml'

# Now we get the orderer node info from either nodecert or node asset
- name: Get node info
  include_tasks: '{{ role_path }}/common/getnodeinfo.yml'
  vars:
    thesecretname: "{{ ordererNode }}"

- name: Get core yaml files
  copy:
    src: '{{ bindir }}/config'
    dest: '{{ agentworkdir }}' 

# When we reach here, we should have either the orderer node cert or
# orderer node asset secret.
- name: 'Query channel {{ channelName }}'
  ansible.builtin.shell: |
    export FABRIC_CFG_PATH={{ agentworkdir }}/config
    export CORE_PEER_TLS_ENABLED=true
    export CORE_PEER_LOCALMSPID={{ orgid}}
    export CORE_PEER_TLS_ROOTCERT_FILE={{ agentworkdir }}/tls/tlsca.crt
    export CORE_PEER_MSPCONFIGPATH={{ agentworkdir }}/user/msp
    export CORE_PEER_ADDRESS={{ endpoint|replace('grpcs://', '') }}
    {{ bindir }}/bin/peer channel fetch config config_block.bk \
    --tls -c {{ channelName }} \
    -o {{ endpoint|replace('grpcs://', '') }} \
    --cafile {{ agentworkdir }}/tls/tlsca.crt
  args:
    chdir: '{{ agentworkdir }}'
    executable: /bin/bash
  register: cmdresult
  ignore_errors: yes

- name: Get the pod name
  set_fact:
    podname: "{{ lookup('env', 'HOSTNAME') }}"
    controllerns: "{{ lookup('file', '/var/run/secrets/kubernetes.io/serviceaccount/namespace') }}"

- name: Update the resource status
  include_tasks: '{{ role_path }}/common/endplay.yml'
  vars:
    RESULT_MSG: >-
      {{ (cmdresult.rc == 0)|ternary('Succeeded - Channel Query', 'Failed - '+cmdresult.stderr) }}
    DOWNLOAD_MSG: >-
      kubectl cp -n {{ controllerns }} -c manager
      {{ podname }}:{{ agentworkdir }}/config_block.bk
      
