# To create a new channel, an action must look like this
#
# spec:
#   description: query channel configuration
#   organization: example.com
#   actions:
#   - name: channelquery
#     description: query channel configuration
#     parameters:
#       channelName: mychannel
#       ordererNode: orderer-sample
#
# The operation will look at the orderer nodecert first, if not found
# it will try to find node asset to get endpoint and certificates.
# either the short orderer node name or the full orderer name can be
# used

- name: Show the passed in variable
  debug:
    var: action

- name: Get variable with their names
  set_fact:
    channelName: "{{ action.parameters.channel_name }}"
    ordererNode: "{{ action.parameters.orderer_node }}"

- name: End the process if either variable is empty
  when: channelName == '' or ordererNode == ''
  include_tasks: '{{ role_path }}/common/endplay.yml'
  vars:
    RESULT_MSG: 'Failed - Both channel name and orderer node must be provided'

- name: Mark the start of the agent
  include_tasks: '{{ role_path }}/common/startplay.yml'

# Now we get the orderer node info from either nodecert or node asset
- name: Get node info
  include_tasks: '{{ role_path }}/common/getnodeinfo.yml'
  vars:
    thesecretname: "{{ ordererNode }}"

- name: Get orderer node admin endpoint
  set_fact:
    ordererid: "{{ lookup('file', agentworkdir+'/'+ordererNode+'/msp/id.json') | from_json }}"

- name: Get core yaml files
  copy:
    src: '{{ bindir }}/config'
    dest: '{{ agentworkdir }}' 

# When we reach here, we should have either the orderer node cert or
# orderer node asset secret. Here the orderer node is used as peer
# credential (msp) contains the actual user msp information. This is
# extremely confusing.
- name: 'Query channel {{ channelName }}'
  ansible.builtin.shell: |
    set -e
    export FABRIC_CFG_PATH={{ agentworkdir }}/config
    export CORE_PEER_TLS_ENABLED=true
    export CORE_PEER_LOCALMSPID={{ ordererid.mspid }}
    export CORE_PEER_TLS_ROOTCERT_FILE={{ agentworkdir }}/{{ ordererNode }}/tls/ca.crt
    export CORE_PEER_MSPCONFIGPATH={{ agentworkdir }}/{{ ordererNode }}/msp
    export CORE_PEER_ADDRESS={{ ordererid.endpoint }}
    {{ bindir }}/bin/peer channel fetch config config_block.bk \
    --tls -c {{ channelName }} -o {{ ordererid.endpoint }} \
    --cafile {{ agentworkdir }}/{{ ordererNode }}/tls/ca.crt --connTimeout 120s
    {{ bindir }}/bin/configtxlator proto_decode --input config_block.bk \
    --type common.Block | jq .data.data[0].payload.data.config > {{ channelName}}_config.json
    cp {{ channelName}}_config.json ~/agent/download
    cp {{ channelName}}_config.json ~/agent/upload
  args:
    chdir: '{{ agentworkdir }}'
    executable: /bin/bash
  register: cmdresult
  ignore_errors: yes

- name: Update the resource status
  when: cmdresult.rc != 0
  include_tasks: '{{ role_path }}/common/endplay.yml'
  vars:
    RESULT_MSG: "Failed - Channel Query {{ cmdresult.stderr }}"

- name: Update the resource status
  include_tasks: '{{ role_path }}/common/endplay.yml'
  vars:
    RESULT_MSG: 'Succeeded - Channel Query'
    DOWNLOAD_MSG: >-
      kubectl cp -n {{ controllerns }} -c manager {{ podname }}:{{ downloaddir }}/{{ channelName}}_config.json
