# To import external nodes into your clusters
#
# spec:
#   organization: example.com
#   actions:
#   - name: channelchange
#     description: create channel change envolope for signing
#     parameters:
#       newconfig: config_block.json
#       channelName: mychannel
#       ordererNode: orderer-sample-example-com
#       peerNode: peer-sample-example-com
#
# newconfig indicate the desired channel configuration which must be
# a full channel configuration json file. This file has to be uploaded
# to the agent first
#
# channelName is the channel name which will be updated.
#
# ordererNode is the orderer node used to send channel changes to.
# this node can be an imported node, only needs its endpoint and
# ca tls cert.
#
# peerNode is the peer node under which credential that the changes
# will be made. It has to be a full node with all the signing and
# private key certs available.

- name: Show the passed in variable
  debug:
    var: action

- name: Get variable with their names
  set_fact:
    newconfig: "{{ action.parameters.newconfig }}"
    channelName: "{{ action.parameters.channel_name }}"
    ordererNode: "{{ action.parameters.orderer_node }}"
    peerNode: "{{ action.parameters.peer_node }}"

- name: End the process if asset name was not provided
  when: newconfig == ''
  include_tasks: '{{ ROOTDIR }}/playbooks/common/endplay.yml'
  vars:
    RESULT_MSG: 'Failed - new channel configuration json file must be provided for channel changes'

- name: Check if the new configuration file exists
  stat:
    path: '{{ uploaddir }}/{{ newconfig }}'
  register: configfile

- name: End the process when new configuration file does not exist
  when: not configfile.stat.exists
  include_tasks: '{{ ROOTDIR }}/playbooks/common/endplay.yml'
  vars:
    RESULT_MSG: 'Failed - new channel configuration json file {{ newconfig }} must be uploaded for channel changes'

- name: Mark the start of the agent
  include_tasks: '{{ ROOTDIR }}/playbooks/common/startplay.yml'
  vars:
    KIND: Agent

- name: Get new configuration json file
  copy:
    src: '{{ uploaddir }}/{{ newconfig }}'
    dest: '{{ agentworkdir }}/{{ channelName }}_config.json' 

# Now we get the orderer node info from either nodecert or node asset
- name: Get orderer node info
  include_tasks: '{{ ROOTDIR }}/playbooks/common/getnodeinfo.yml'
  vars:
    thesecretname: "{{ ordererNode }}"
    targetdir: "{{ agentworkdir }}"

- name: Get orderer node admin endpoint
  set_fact:
    ordererid: "{{ lookup('file', agentworkdir+'/'+ordererNode+'/msp/id.json') | from_json }}"

- name: Get peer node info
  include_tasks: '{{ ROOTDIR }}/playbooks/common/getnodeinfo.yml'
  vars:
    thesecretname: "{{ peerNode }}"
    targetdir: "{{ agentworkdir }}"

- name: Get peer node admin endpoint
  set_fact:
    peerid: "{{ lookup('file', agentworkdir+'/'+peerNode+'/msp/id.json') | from_json }}"

- name: Get core yaml files
  copy:
    src: '{{ bindir }}/config'
    dest: '{{ agentworkdir }}'

- name: Generate the signoff script
  template:
    src: "{{ role_path }}/ops/channelchange/templates/process.j2"
    dest: "{{ agentworkdir }}/process.sh"
    mode: +x

- name: Sign off the changes
  ansible.builtin.command: "{{ agentworkdir }}/process.sh"
  args:
    chdir: '{{ agentworkdir }}'
  register: cmdresult
  ignore_errors: yes

- name: Update the resource status
  when: cmdresult.rc != 0
  include_tasks: '{{ ROOTDIR }}/playbooks/common/endplay.yml'
  vars:
    RESULT_MSG: "Failed - Channel Change. {{ cmdresult.stderr }}"

- name: Update the crd status
  include_tasks: '{{ ROOTDIR }}/playbooks/common/endplay.yml'
  vars:
    RESULT_MSG: 'Succeeded - Channel Change'
    DOWNLOAD_MSG: >-
      kubectl cp -n {{ controllerns }} -c manager {{ podname }}:{{ downloaddir }}/{{ channelName }}_update_envelope.pb
