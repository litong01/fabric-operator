# thesecretname must be the full name, it is made up by
# the resource name + '-' + organization name with dot(.)
# being replaced by dash '-'

- name: Check if name variable is set
  when: (thesecretname|trim) == ''
  include_tasks: '{{ role_path }}/common/endplay.yml'
  vars:
    RESULT_MSG: 'Failed - No secret name provided'

- name: Search for the matching node cert secret
  community.kubernetes.k8s_info:
    kind: Secret
    api_version: v1
    name: '{{ thesecretname }}-nodecert'
    namespace: '{{ ansible_operator_meta.namespace }}'
  register: nodecert_secret

- name: Search for the match actual node
  when: (nodecert_secret.resources|length) > 0
  block:
  - name: Search for the orderer node
    community.kubernetes.k8s_info:
      kind: "{{ nodecert_secret.resources[0].metadata.labels['fabric-node-type'] }}"
      api_version: 'operator.fabric.hyperledger.org/v1alpha1'
      name: '{{ nodecert_secret.resources[0].metadata.ownerReferences[0].name }}'
      namespace: '{{ ansible_operator_meta.namespace }}'
    register: realnode

  - name: Update the agent status
    when: (realnode.resources|length) == 0
    include_tasks: '{{ role_path }}/common/endplay.yml'
    vars:
      RESULT_MSG: 'Failed - Node {{ nodecert_secret.resources[0].metadata.ownerReferences[0].name }} not found'
  
  - name: Get the node endpoint and cert
    set_fact:
      endpoint: "{{ realnode.resources[0].status.endpoint }}"
      tlsca: "{{ nodecert_secret.resources[0].data['tlsca.crt'] | b64decode }}"

- name: Search for the matching node asset secret
  when: (nodecert_secret.resources|length) == 0
  block:
  - name: Try to locate imported orderer node
    community.kubernetes.k8s_info:
      kind: Secret
      api_version: v1
      name: '{{ thesecretname }}-asset'
      namespace: '{{ ansible_operator_meta.namespace }}'
    register: asset_secret

  - name: Update the crd status to fail
    when: (asset_secret.resources|length) == 0
    include_tasks: '{{ role_path }}/common/endplay.yml'
    vars:
      RESULT_MSG: 'Failed - Secret {{ thesecretname }}-asset not found'

  - name: Get the imported node asset from the secret
    set_fact:
      assetobj: '{{ asset_secret.resources[0].data.asset | b64decode | from_json }}'

  - name: Get the node endpoint and cert
    set_fact:
      endpoint: "{{ assetobj['api_url'] }}"
      tlsca: "{{ assetobj['tls_ca_root_cert'] | b64decode }}"

# When we reach here, we should have the following
#    endpoint
#    tlsca

- name: Set up node tls directory
  file:
    path: '{{ agentworkdir }}/{{ item }}'
    state: 'directory'
    mode: 0775
  with_items:
  - 'tls'

- name: Write certs to the directory
  copy:
    content: '{{ item.content }}'
    dest: '{{ agentworkdir }}/tls/{{ item.name }}'
  with_items:
  - "{{ { 'name': 'tlsca.crt', 'content': tlsca } }}"
