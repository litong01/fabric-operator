# This module uses one orderer node and one peer node to
# retrieve current channel configuration.
# the two parameters passed in must be an orderer node
# full name such as orderer-sample-example-com or asset
# name


- name: Get variable with their names
  set_fact:
    channelName: "{{ action.parameters.channel_name }}"
    ordererNode: "{{ action.parameters.orderer_node }}"

- name: End the process if either variable is empty
  when: channelName == '' or ordererNode == ''
  include_tasks: '{{ role_path }}/common/endplay.yml'
  vars:
    RESULT_MSG: 'Failed - Both channel name and orderer node must be provided'

# Now we get the orderer node info from either nodecert or node asset
- name: Get node info
  include_tasks: '{{ role_path }}/common/getnodeinfo.yml'
  vars:
    thesecretname: "{{ ordererNode }}"

- name: Get orderer node admin endpoint
  set_fact:
    ordererid: "{{ lookup('file', agentworkdir+'/'+ordererNode+'/msp/id.json') | from_json }}"

- name: Get core yaml files
  copy:
    src: '{{ bindir }}/config'
    dest: '{{ agentworkdir }}' 

# When we reach here, we should have either the orderer node cert or
# orderer node asset secret. Here the orderer node is used as peer
# credential (msp) contains the actual user msp information. This is
# extremely confusing.
- name: 'Query channel {{ channelName }}'
  ansible.builtin.shell: |
    export FABRIC_CFG_PATH={{ agentworkdir }}/config
    export CORE_PEER_TLS_ENABLED=true
    export CORE_PEER_LOCALMSPID={{ ordererid.mspid }}
    export CORE_PEER_TLS_ROOTCERT_FILE={{ agentworkdir }}/{{ ordererNode }}/tls/ca.crt
    export CORE_PEER_MSPCONFIGPATH={{ agentworkdir }}/{{ ordererNode }}/msp
    export CORE_PEER_ADDRESS={{ ordererid.endpoint }}
    {{ bindir }}/bin/peer channel fetch config config_block.bk \
    --tls -c {{ channelName }} -o {{ ordererid.endpoint }} \
    --cafile {{ agentworkdir }}/{{ ordererNode }}/tls/ca.crt
  args:
    chdir: '{{ agentworkdir }}'
    executable: /bin/bash
  register: cmdresult
  ignore_errors: yes
