---
# tasks file for Peer
- name: Validate configurations
  include_tasks: "validation.yml"

- name: Get NODE_HOSTNAME or NODE_IP info
  include_tasks: "{{ role_path }}/../../playbooks/network/get-hostname.yml"

- name: Get the home directory and setup node name
  set_fact:
    workdir: "{{ lookup('env','HOME') }}/vars"
    nodename: "{{ ansible_operator_meta.name }}.{{ organization }}"

- name: setup canonical name and node cert name for the node
  set_fact:
    cnodename: "{{ nodename | replace('.', '-') | lower }}"
    nodecertname: "{{ ((node_cert == None or (node_cert|trim) == '')) | ternary(ansible_operator_meta.name, node_cert) }}"

- name: Setup node cert secret name
  set_fact:
    nodecertsecretname: "{{ nodecertname }}-{{ organization|replace('.','-') }}-nodecert"

- name: Retrieve the node cert
  community.kubernetes.k8s_info:
    kind: Nodecert
    api_version: v1
    name: '{{ nodecertname }}'
    namespace: '{{ ansible_operator_meta.namespace }}'
  register: nodecert

- name: Generate node cert when there is none
  when: nodecert.resources | length == 0
  community.kubernetes.k8s:
    definition:
      kind: Nodecert
      apiVersion: operator.fabric.hyperledger.org/v1alpha1
      metadata:
        name: '{{ nodecertname }}'
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        organization: "{{ organization }}"
        nodeType: Peer

- name: Retrieve the node cert
  community.kubernetes.k8s_info:
    kind: Nodecert
    api_version: v1
    name: "{{ nodecertname }}"
    namespace: '{{ ansible_operator_meta.namespace }}'
    wait: yes
    wait_condition:
      type: Running
      status: "True"
    wait_sleep: 3
    wait_timeout: 120

- name: start peer node service
  community.kubernetes.k8s:
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        labels:
          k8s-app: '{{ cnodename }}'
        name: '{{ ansible_operator_meta.name }}'
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        selector:
          k8s-app: '{{ cnodename }}'
        ports:
        - name: peerport
          port: 7051
          targetPort: 7051
        - name: chaincodeport
          port: 7052
          targetPort: 7052
        - name: grpcproxy
          port: 8443
          targetPort: 8443
        - name: operationport
          port: 7061
          targetPort: 7061

# Setup port to expose the services outside of the cluster
- name: Setup target ports
  set_fact:
    TARGET_PORTS: '{{ [7051, 8445, 7061] }}'
    EXT_PORTS: '{{ [] }}'

# The module included here will expose the target ports to outside of k8s cluster and
# will return a list of ports for the target ports
- name: Now expose Orderer service to outside of the k8s cluster
  include_tasks: '{{ role_path }}/../../playbooks/network/{{ LB_TYPE|lower }}/apply.yml'

- name: Check if the ports exposed correctly
  fail:
    msg: 'The ports were not exposed correctly, fail the task'
  when: (EXT_PORTS|length) != (TARGET_PORTS|length)

- name: Setup reference name
  set_fact:
    iporhost: "{{ (NODE_HOSTNAME=='')|ternary(NODE_IP, NODE_HOSTNAME) }}"

- name: start peer node
  community.kubernetes.k8s:
    definition:
      kind: StatefulSet
      apiVersion: apps/v1
      metadata:
        name: '{{ ansible_operator_meta.name }}'
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        selector:
          matchLabels:
            k8s-app: '{{ cnodename }}'
            hlf-type: peer
            hlf-dn: '{{ organization }}'
            hlf-mspid: '{{ cnodename }}'
        serviceName: '{{ ansible_operator_meta.name }}'
        replicas: 1
        volumeClaimTemplates:
        - metadata:
            name: '{{ cnodename }}-data'
          spec:
            accessModes:
            - ReadWriteOnce
            resources:
              requests:
                storage: "{{ storage }}"
        template:
          metadata:
            labels:
              k8s-app: '{{ cnodename }}'
              hlf-type: peer
              hlf-dn: '{{ organization }}'
              hlf-mspid: '{{ cnodename }}'
          spec:
            volumes:
            - name: nodecert
              projected:
                sources:
                - secret:
                    name: "{{ nodecertsecretname }}"
                    items:
                    - key: ca.crt
                      path: "cacerts/ca.pem"
                    - key: server.key
                      path: "keystore/priv_sk"
                    - key: server.crt
                      path: "signcerts/signcert.pem"
                    - key: config.yaml
                      path: "config.yaml"
            - name: nodetlscert
              projected:
                sources:
                - secret:
                    name: "{{ nodecertsecretname }}"
                    items:
                    - key: tlsca.crt
                      path: "ca.crt"
                    - key: tls.key
                      path: "server.key"
                    - key: tls.crt
                      path: "server.crt"
            initContainers:
            - name: setup
              image: 'email4tong/fabricop:v1.0.0'
              imagePullPolicy: Always
              command:
              - sh
              - "-c"
              - |
                cd ~/downloader
                ansible-playbook -e "RELEASE={{ release }}" -e "ansible_python_interpreter={{ ansible_playbook_python }}" downloader.yml
                chmod +x /var/hyperledger/production/peer
                rm -rf /var/hyperledger/production/bin /var/hyperledger/production/config
              volumeMounts:
              - { mountPath: "/var/hyperledger/production", name: "{{ cnodename }}-data" }
            containers:
            - name: grpcproxy
              image: ghcr.io/hyperledger-labs/grpc-web:latest
              env:
              - { name: "LICENSE", value: "accept" }
              - { name: "BACKEND_ADDRESS", value: "{{ iporhost }}:{{ EXT_PORTS[0] }}" }
              - { name: "SERVER_TLS_CERT_FILE", value: "/certs/tls/server.crt" }
              - { name: "SERVER_TLS_KEY_FILE", value: "/certs/tls/server.key" }
              - { name: "BACKEND_TLS_CA_FILES", value: "/certs/tls/ca.crt" }
              - { name: "SERVER_BIND_ADDRESS", value: "0.0.0.0" }
              - { name: "SERVER_HTTP_DEBUG_PORT", value: "8081" }
              - { name: "SERVER_HTTP_TLS_PORT", value: "8445" }
              - { name: "BACKEND_TLS", value: "true" }
              - { name: "SERVER_HTTP_MAX_WRITE_TIMEOUT", value: "5m" }
              - { name: "SERVER_HTTP_MAX_READ_TIMEOUT", value: "5m" }
              - { name: "USE_WEBSOCKETS", value: "true" }
              volumeMounts:
              - { mountPath: "/certs/tls", name: "nodetlscert" }
            - name: fabric-peer
              image: 'email4tong/fabricop:v1.0.0'
              imagePullPolicy: Always
              env:
              - { name: "FABRIC_LOGGING_SPEC",                value: "{{ log_level }}" }
              - { name: "FABRIC_CFG_PATH",                    value: "/var/hyperledger/production" }
              - { name: "CORE_PEER_GOSSIP_ORGLEADER",         value: "true" }
              - { name: "CORE_PEER_GOSSIP_USELEADERELECTION", value: "false" }
              - { name: "CORE_PEER_GOSSIP_STATE_ENABLED",     value: "false" }
              - { name: "CORE_PEER_TLS_ENABLED",              value: "true" }
              - { name: "CORE_PEER_TLS_CERT_FILE",            value: "/var/hyperledger/fabric/tls/server.crt" }
              - { name: "CORE_PEER_TLS_KEY_FILE",             value: "/var/hyperledger/fabric/tls/server.key" }
              - { name: "CORE_PEER_TLS_ROOTCERT_FILE",        value: "/var/hyperledger/fabric/tls/ca.crt" }
              - { name: "CORE_CHAINCODE_EXECUTETIMEOUT",      value: "300s" }
              - { name: "CORE_PEER_ID",                       value: "{{ nodename }}" }
              - { name: "CORE_PEER_MSPCONFIGPATH",            value: "/var/hyperledger/fabric/msp" }
              - { name: "CORE_PEER_ADDRESS",                  value: "0.0.0.0:7051" }
              - { name: "CORE_PEER_LISTENADDRESS",            value: "0.0.0.0:7051" }
              - { name: "CORE_PEER_LOCALMSPID",               value: "{{ mspid }}" }
              - { name: "CORE_CHAINCODE_LOGGING_LEVEL",       value: "{{ log_level }}" }
              volumeMounts:
              - { mountPath: "/var/hyperledger/fabric/msp", name: "nodecert" }
              - { mountPath: "/var/hyperledger/fabric/tls", name: "nodetlscert" }
              - { mountPath: "/var/hyperledger/production", name: "{{ cnodename }}-data" }
              command: ['/var/hyperledger/production/peer']
              args: ["node", "start"]

- name: Update the crd status
  operator_sdk.util.k8s_status:
    api_version: operator.fabric.hyperledger.org/v1alpha1
    kind: Peer
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    status:
      endpoint: 'grpcs://{{ iporhost }}:{{ EXT_PORTS[0] }}'
      grpcproxy: 'https://{{ iporhost }}:{{ EXT_PORTS[1] }}'
      operations: 'http://{{ iporhost }}:{{ EXT_PORTS[2] }}'
