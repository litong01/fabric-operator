---
- name: Validate configurations
  include_tasks: "validation.yml"

# Try to get istio info
- name: Get istio info
  include_tasks: "{{ role_path }}/../../playbooks/get-istio-hostname.yml"

- name: Search for the ca node
  community.kubernetes.k8s_info:
    kind: CA
    api_version: operator.fabric.hyperledger.org/v1alpha1
    name: '{{ ansible_operator_meta.name }}'
    namespace: '{{ ansible_operator_meta.namespace }}'
  register: ca_operator

- name: Check if this will be a new operator or an update
  set_fact:
    new_node: "{{ ((ca_operator.resources | length) == 0)| ternary('true', 'false') }}"

- name: Setup node name
  set_fact:
    nodename: "{{ ansible_operator_meta.name }}.{{ organization }}"

- name: Setup canonical name and node cert name for the node
  set_fact:
    cnodename: "{{ nodename | replace('.', '-') | lower }}"
    nodecertname: "{{ ((node_cert == None or (node_cert|trim) == '')) | ternary(ansible_operator_meta.name, node_cert) }}"

- name: Setup matching node cert secret name
  set_fact:
    nodecertsecretname:

- name: Retrieve the CA node cert secret
  community.kubernetes.k8s_info:
    kind: Nodecert
    api_version: operator.fabric.hyperledger.org/v1alpha1
    name: '{{ nodecertname }}'
    namespace: '{{ ansible_operator_meta.namespace }}'
  register: nodecert

- name: Generate CA node cert when there is none
  when: (nodecert.resources|length) == 0
  community.kubernetes.k8s:
    definition:
      kind: Nodecert
      apiVersion: operator.fabric.hyperledger.org/v1alpha1
      metadata:
        name: '{{ nodecertname }}'
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        organization: "{{ organization }}"
        nodeType: CA

- name: Retrieve the CA node cert secret
  community.kubernetes.k8s_info:
    kind: Nodecert
    api_version: operator.fabric.hyperledger.org/v1alpha1
    name: "{{ nodecertname }}"
    namespace: '{{ ansible_operator_meta.namespace }}'
    wait: yes
    wait_condition:
      type: Running
      status: "True"
    wait_sleep: 3
    wait_timeout: 120

- name: start ca service
  community.kubernetes.k8s:
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        labels:
          k8s-app: '{{ cnodename }}'
        name: '{{ ansible_operator_meta.name }}'
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        selector:
          k8s-app: '{{ cnodename }}'
        ports:
        - name: caport
          port: 7054
          targetPort: 7054

- name: start ca node
  community.kubernetes.k8s:
    definition:
      kind: StatefulSet
      apiVersion: apps/v1
      metadata:
        name: '{{ ansible_operator_meta.name }}'
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        selector:
          matchLabels:
            k8s-app: '{{ cnodename }}'
            hlf-type: ca
            hlf-dn: '{{ organization }}'
            hlf-mspid: '{{ cnodename }}'
        serviceName: '{{ ansible_operator_meta.name }}'
        replicas: 1
        volumeClaimTemplates:
        - metadata:
            name: '{{ cnodename }}-data'
          spec:
            accessModes:
            - ReadWriteOnce
            resources:
              requests:
                storage: "{{ storage }}"
        template:
          metadata:
            labels:
              k8s-app: '{{ cnodename }}'
              hlf-type: ca
              hlf-dn: '{{ organization }}'
              hlf-mspid: '{{ cnodename }}'
          spec:
            volumes:
            - name: cert-key-id
              secret:
                secretName: "{{ nodecertname }}-{{ organization|replace('.','-') }}-nodecert"
            containers:
            - name: fabric-ca
              image: 'hyperledger/fabric-ca:{{ release }}'
              imagePullPolicy: IfNotPresent
              env:
              - { name: "FABRIC_CA_SERVER_LOGLEVEL", value: "{{ log_level }}" }
              - { name: "FABRIC_CA_SERVER_DEBUG", value: "false" }
              - { name: "FABRIC_CA_HOME", value: "/etc/hyperledger/fabric-ca-server" }
              - { name: "FABRIC_CA_SERVER_CA_NAME", value: "{{ nodename }}" }
              - { name: "FABRIC_CA_SERVER_CA_KEYFILE", value: "/etc/hyperledger/fabric-ca/idcerts/ca-key.pem" }
              - { name: "FABRIC_CA_SERVER_CA_CERTFILE", value: "/etc/hyperledger/fabric-ca/idcerts/ca-cert.pem" }
              - { name: "FABRIC_CA_SERVER_TLS_ENABLED", value: "true" }
              - { name: "FABRIC_CA_SERVER_TLS_KEYFILE", value: "/etc/hyperledger/fabric-ca/idcerts/tls-key.pem" }
              - { name: "FABRIC_CA_SERVER_TLS_CERTFILE", value: "/etc/hyperledger/fabric-ca/idcerts/tls-cert.pem" }
              - name: CA_USERNAME
                valueFrom:
                  secretKeyRef:
                    name: "{{ nodecertname }}-{{ organization|replace('.','-') }}-nodecert"
                    key: adminid
              - name: CA_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: "{{ nodecertname }}-{{ organization|replace('.','-') }}-nodecert"
                    key: adminpw
              volumeMounts:
              - { mountPath: "/etc/hyperledger/fabric-ca/idcerts", name: "cert-key-id" }
              - { mountPath: "/etc/hyperledger/fabric-ca-server", name: "{{ cnodename }}-data" }
              command: ["fabric-ca-server"]
              args:  ["start", "-b", "$(CA_USERNAME):$(CA_PASSWORD)"]

# When we reach this point, we know that CA node is most likely up
# running, now expose the node endpoint

# The following tasks are all for exposing the node endpoint to
# outside of the k8s cluster using istio
# When include another playbook, only role_path can be used
# both playbook_dir and inventory_dir will be mapped to tmp directory
- name: Get istio information and available port
  include_tasks: "{{ role_path }}/../../playbooks/get-istio-info.yml"

- name: Add gateway and virtual service
  include_tasks: "{{ role_path }}/../../playbooks/add-gw-vs.yml"

- name: Check the existance of the gateway
  community.kubernetes.k8s_info:
    api_version: 'networking.istio.io/v1beta1'
    kind: Gateway
    name: '{{ ansible_operator_meta.name }}-gateway'
    namespace: '{{ ansible_operator_meta.namespace }}'
  register: thegateway

# Update the crd to have endpoints and other possible information
- name: update the crd status
  when: thegateway.resources | length == 1
  operator_sdk.util.k8s_status:
    api_version: operator.fabric.hyperledger.org/v1alpha1
    kind: CA
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    status:
      endpoint: >-
        {{ (istio_hostname=='')|ternary(istio_ip, istio_hostname) }}:{{ thegateway.resources[0].spec.servers[0].port.number }}