---
- name: Validate configurations
  include_tasks: "validation.yml"

- name: Get NODE_HOSTNAME or NODE_IP info
  include_tasks: "{{ ROOTDIR }}/playbooks/network/get-hostname.yml"

- name: Get the home directory and setup node name
  set_fact:
    workdir: "{{ lookup('env','HOME') }}/vars"
    nodename: "{{ ansible_operator_meta.name }}.{{ organization }}"

- name: setup canonical name and node cert name for the node
  set_fact:
    cnodename: "{{ nodename | replace('.', '-') | lower }}"

- name: Setup node cert secret name
  set_fact:
    nodecertsecretname: "{{ nodecertname }}-{{ organization|replace('.','-') }}-nodecert"

- name: Retrieve the node cert
  community.kubernetes.k8s_info:
    kind: Nodecert
    api_version: v1
    name: '{{ nodecertname }}'
    namespace: '{{ ansible_operator_meta.namespace }}'
  register: nodecert

- name: Generate node cert when there is none
  when: nodecert.resources | length == 0
  community.kubernetes.k8s:
    definition:
      kind: Nodecert
      apiVersion: operator.fabric.hyperledger.org/v1alpha1
      metadata:
        name: '{{ nodecertname }}'
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        organization: "{{ organization }}"
        nodeType: Orderer

- name: Retrieve the node cert
  community.kubernetes.k8s_info:
    kind: Nodecert
    api_version: v1
    name: "{{ nodecertname }}"
    namespace: '{{ ansible_operator_meta.namespace }}'
    wait: yes
    wait_condition:
      type: Running
      status: "True"
    wait_sleep: 3
    wait_timeout: 120

- name: start orderer node service
  community.kubernetes.k8s:
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        labels:
          k8s-app: '{{ cnodename }}'
        name: '{{ ansible_operator_meta.name }}'
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        selector:
          k8s-app: '{{ cnodename }}'
        ports:
        - name: ordererport
          port: 7050
          targetPort: 7050
        - name: adminport
          port: 7080
          targetPort: 7080
        - name: grpcproxy
          port: 8443
          targetPort: 8443
        - name: operationport
          port: 7060
          targetPort: 7060

# The following tasks are all for exposing the node endpoint to
# outside of the k8s cluster
- name: Setup target ports
  set_fact:
    TARGET_PORTS: '{{ [7050, 7080, 8445, 7060] }}'
    EXT_PORTS: '{{ [] }}'

# The module included here will expose the target ports to outside of k8s cluster and
# will return a list of ports for the target ports
- name: Now expose Orderer service to outside of the k8s cluster
  include_tasks: '{{ ROOTDIR }}/playbooks/network/{{ LB_TYPE|lower }}/apply.yml'

- name: Check if the ports exposed correctly
  fail:
    msg: 'The ports were not exposed correctly, fail the task'
  when: (EXT_PORTS|length) != (TARGET_PORTS|length)

- name: Setup reference name
  set_fact:
    iporhost: "{{ (NODE_HOSTNAME=='')|ternary(NODE_IP, NODE_HOSTNAME) }}"

- name: start orderer node
  community.kubernetes.k8s:
    definition:
      kind: StatefulSet
      apiVersion: apps/v1
      metadata:
        name: '{{ ansible_operator_meta.name }}'
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        selector:
          matchLabels:
            k8s-app: '{{ cnodename }}'
            hlf-type: orderer
            hlf-dn: '{{ organization }}'
            hlf-mspid: '{{ cnodename }}'
        serviceName: '{{ ansible_operator_meta.name }}'
        replicas: 1
        volumeClaimTemplates:
        - metadata:
            name: '{{ cnodename }}-data'
          spec:
            accessModes:
            - ReadWriteOnce
            resources:
              requests:
                storage: "{{ storage }}"
        template:
          metadata:
            labels:
              k8s-app: '{{ cnodename }}'
              hlf-type: orderer
              hlf-dn: '{{ organization }}'
              hlf-mspid: '{{ cnodename }}'
          spec:
            volumes:
            - name: nodecert
              projected:
                sources:
                - secret:
                    name: "{{ nodecertsecretname }}"
                    items:
                    - key: ca.crt
                      path: "cacerts/ca.pem"
                    - key: server.key
                      path: "keystore/priv_sk"
                    - key: server.crt
                      path: "signcerts/signcert.pem"
                    - key: config.yaml
                      path: "config.yaml"
            - name: nodetlscert
              projected:
                sources:
                - secret:
                    name: "{{ nodecertsecretname }}"
                    items:
                    - key: tlsca.crt
                      path: "ca.crt"
                    - key: tls.key
                      path: "server.key"
                    - key: tls.crt
                      path: "server.crt"
            containers:
            - name: grpcproxy
              image: ghcr.io/hyperledger-labs/grpc-web:latest
              env:
              - { name: "LICENSE", value: "accept" }
              - { name: "BACKEND_ADDRESS", value: "{{ iporhost }}:{{ EXT_PORTS[0] }}" }
              - { name: "SERVER_TLS_CERT_FILE", value: "/certs/tls/server.crt" }
              - { name: "SERVER_TLS_KEY_FILE", value: "/certs/tls/server.key" }
              - { name: "BACKEND_TLS_CA_FILES", value: "/certs/tls/ca.crt" }
              - { name: "SERVER_BIND_ADDRESS", value: "0.0.0.0" }
              - { name: "SERVER_HTTP_DEBUG_PORT", value: "8081" }
              - { name: "SERVER_HTTP_TLS_PORT", value: "8445" }
              - { name: "BACKEND_TLS", value: "true" }
              - { name: "SERVER_HTTP_MAX_WRITE_TIMEOUT", value: "5m" }
              - { name: "SERVER_HTTP_MAX_READ_TIMEOUT", value: "5m" }
              - { name: "USE_WEBSOCKETS", value: "true" }
              volumeMounts:
              - { mountPath: "/certs/tls", name: "nodetlscert" }
            - name: fabric-orderer
              image: 'hyperledger/fabric-orderer:{{ release }}'
              imagePullPolicy: IfNotPresent
              livenessProbe:
                httpGet:
                  path: /healthz
                  port: 7060
                failureThreshold: 1
                periodSeconds: 10
              readinessProbe:
                initialDelaySeconds: 5
                periodSeconds: 4
                timeoutSeconds: 1
                successThreshold: 1
                failureThreshold: 1
                httpGet:
                  host:
                  scheme: HTTP
                  path: /healthz
                  port: 7060
              env:
              - { name: "FABRIC_LOGGING_SPEC", value: "{{ log_level }}" }
              - { name: "ORDERER_GENERAL_LISTENADDRESS", value: "0.0.0.0" }
              - { name: "ORDERER_GENERAL_LISTENPORT", value: "7050" }
              - { name: "ORDERER_GENERAL_LOCALMSPID", value: "{{ mspid }}" }
              - { name: "ORDERER_GENERAL_LOCALMSPDIR", value: "/var/hyperledger/orderer/msp" }
              - { name: "ORDERER_GENERAL_BOOTSTRAPMETHOD", value: "none" }
              - { name: "ORDERER_GENERAL_TLS_ENABLED", value: "true" }
              - { name: "ORDERER_GENERAL_TLS_PRIVATEKEY",
                  value: "/var/hyperledger/orderer/tls/server.key" }
              - { name: "ORDERER_GENERAL_TLS_CERTIFICATE",
                  value: "/var/hyperledger/orderer/tls/server.crt" }
              - { name: "ORDERER_GENERAL_TLS_ROOTCAS",
                  value: "[/var/hyperledger/orderer/tls/ca.crt]" }
              - { name: "ORDERER_GENERAL_TLS_SERVERHOSTOVERRIDE", value: "{{ nodename }}" }
              - { name: "ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE",
                  value: "/var/hyperledger/orderer/tls/server.crt" }
              - { name: "ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY",
                  value: "/var/hyperledger/orderer/tls/server.key" }
              - { name: "ORDERER_GENERAL_CLUSTER_ROOTCAS",
                  value: "[/var/hyperledger/orderer/tls/ca.crt]" }
              - { name: "ORDERER_ADMIN_LISTENADDRESS", value: "0.0.0.0:7080" }
              - { name: "ORDERER_ADMIN_TLS_ENABLED", value: "true" }
              - { name: "ORDERER_ADMIN_TLS_CLIENTAUTHREQUIRED", value: "true" }
              - { name: "ORDERER_ADMIN_TLS_PRIVATEKEY",
                  value: "/var/hyperledger/orderer/tls/server.key" }
              - { name: "ORDERER_ADMIN_TLS_CERTIFICATE",
                  value: "/var/hyperledger/orderer/tls/server.crt" }
              - { name: "ORDERER_ADMIN_TLS_CLIENTROOTCAS",
                  value: "[/var/hyperledger/orderer/tls/ca.crt]" }
              - { name: "ORDERER_CHANNELPARTICIPATION_ENABLED", value: "true" }
              - { name: "ORDERER_GENERAL_FILELEDGER_LOCATION", value: "/var/hyperledger/production" }
              - { name: "ORDERER_OPERATIONS_LISTENADDRESS", value: "0.0.0.0:7060" }
              - { name: "ORDERER_OPERATIONS_TLS_ENABLED", value: "false" }
              volumeMounts:
              - { mountPath: "/var/hyperledger/orderer/msp", name: "nodecert" }
              - { mountPath: "/var/hyperledger/orderer/tls", name: "nodetlscert" }
              - { mountPath: "/var/hyperledger/production", name: "{{ cnodename }}-data" }
              command: ['orderer']

- name: Update the crd status
  operator_sdk.util.k8s_status:
    api_version: operator.fabric.hyperledger.org/v1alpha1
    kind: Orderer
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    status:
      endpoint: 'grpcs://{{ iporhost }}:{{ EXT_PORTS[0] }}'
      adminendpoint: '{{ iporhost }}:{{ EXT_PORTS[1] }}'
      grpcproxy: 'https://{{ iporhost }}:{{ EXT_PORTS[2] }}'
      operations: 'http://{{ iporhost }}:{{ EXT_PORTS[3] }}'
