---
- name: Validate configurations
  include_tasks: "validation.yml"

- name: Get NODE_HOSTNAME or NODE_IP info
  include_tasks: "{{ ROOTDIR }}/playbooks/network/get-hostname.yml"

- name: Get the home directory and setup node name
  set_fact:
    workdir: "{{ lookup('env','HOME') }}/vars"
    nodename: "{{ ansible_operator_meta.name }}.{{ organization }}"
    legacy: "{{ genesisfile is defined and genesisfile != '' and genesisfile != None }}"
    additionalOrgs: "{{ additional_orgs | default([]) }}"

- name: setup canonical name and node cert name for the node
  set_fact:
    cnodename: "{{ nodename | replace('.', '-') | lower }}"

- name: Setup node cert secret name
  set_fact:
    nodecertsecretname: "{{ nodecertname }}-{{ organization|replace('.','-') }}-nodecert"

- name: Retrieve the node cert
  community.kubernetes.k8s_info:
    kind: Nodecert
    api_version: v1
    name: '{{ nodecertname }}'
    namespace: '{{ ansible_operator_meta.namespace }}'
  register: nodecert

- name: Generate node cert when there is none
  when: nodecert.resources | length == 0
  community.kubernetes.k8s:
    definition:
      kind: Nodecert
      apiVersion: operator.fabric.hyperledger.org/v1alpha1
      metadata:
        name: '{{ nodecertname }}'
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        organization: "{{ organization }}"
        nodeType: Orderer

- name: Retrieve the node cert secret to make sure it exists
  community.kubernetes.k8s_info:
    kind: Secret
    api_version: v1
    name: "{{ nodecertsecretname }}"
    namespace: '{{ ansible_operator_meta.namespace }}'
    wait: yes
    wait_sleep: 5
    wait_timeout: 120
  register: nodesecret

- name: start orderer node service
  community.kubernetes.k8s:
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        labels:
          k8s-app: '{{ cnodename }}'
        name: '{{ ansible_operator_meta.name }}'
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        selector:
          k8s-app: '{{ cnodename }}'
        ports:
        - name: ordererport
          port: 7050
          targetPort: 7050
        - name: adminport
          port: 7080
          targetPort: 7080
        - name: grpcproxy
          port: 8445
          targetPort: 8445
        - name: operationport
          port: 7060
          targetPort: 7060

# The following tasks are all for exposing the node endpoint to
# outside of the k8s cluster
- name: Setup target ports
  set_fact:
    TARGET_PORTS: '{{ [7050, 7080, 8445, 7060] }}'
    EXT_PORTS: '{{ [] }}'

# The module included here will expose the target ports to outside of k8s cluster and
# will return a list of ports for the target ports
- name: Now expose Orderer service to outside of the k8s cluster
  include_tasks: '{{ ROOTDIR }}/playbooks/network/{{ LB_TYPE|lower }}/apply.yml'

- name: Check if the ports exposed correctly
  fail:
    msg: 'The ports were not exposed correctly, fail the task'
  when: (EXT_PORTS|length) != (TARGET_PORTS|length)

- name: Setup reference name
  set_fact:
    iporhost: "{{ (NODE_HOSTNAME=='')|ternary(NODE_IP, NODE_HOSTNAME) }}"

- name: Boot up nonsystem orderer node
  when: legacy != True
  include_tasks: 'nonsystem.yml'

- name: Boot up legacy orderer node
  when: legacy == True
  include_tasks: 'system.yml'

- name: Update the crd status
  operator_sdk.util.k8s_status:
    api_version: operator.fabric.hyperledger.org/v1alpha1
    kind: Orderer
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    status:
      endpoint: 'grpcs://{{ iporhost }}:{{ EXT_PORTS[0] }}'
      adminendpoint: '{{ iporhost }}:{{ EXT_PORTS[1] }}'
      grpcproxy: 'https://{{ iporhost }}:{{ EXT_PORTS[2] }}'
      operations: 'http://{{ iporhost }}:{{ EXT_PORTS[3] }}'
