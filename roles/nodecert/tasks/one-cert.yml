---
# expect to have the following parameters
# partyid
# party_role can be admin, p
#  
# party_type, indicate the cert is for what node
#   party_type: admin, user, ca, peer or orderer
# party_cn, indicates the common name of the party, this could be
# peer node name, orderer node name, a user name, for example:
#   party_cn: 'admin'
#   party_cn: 'john'
# this module also uses nodename and istio_hostname for the subject
# alternative name

- name: Set party file name prefix and SAN
  set_fact:
    partyid: "{{ party.id }}"
    partytype: "{{ party.type }}"
    partycn: "{{ party.cn }}"
    partytls: "{{ party.tls }}"
    sans: >-
      DNS:{{ansible_operator_meta.name }}.{{ ansible_operator_meta.namespace }},
      DNS:{{ nodename }}
      {{ (istio_hostname=='')|ternary('', ',DNS:'+istio_hostname) }}
      {{ (istio_ip=='')|ternary('', ',IP:'+istio_ip) }}

- name: Remove spaces from sans
  set_fact:
    sans: "{{ sans | replace(' ', '') }}"

- name: Generate a private keys
  community.crypto.openssl_privatekey:
    path: "{{ certdir }}/{{ partyid }}-key.pem"
    curve: secp256r1
    type: ECC

- name: Process CA
  when: partytype == 'ca'
  block:
  - name: Generate CSR
    community.crypto.openssl_csr:
      path: "{{ certdir }}/{{ partyid }}.csr"
      privatekey_path: "{{ certdir }}/{{ partyid }}-key.pem"
      subject:
        OU: "{{ partytype | lower }}"
        O: "{{ organization }}"
      subject_alt_name: '{{ sans }}'
      common_name: "{{ partycn }}"
      basic_constraints_critical: yes
      basic_constraints: 
      - 'CA:TRUE'
      key_usage:
      - digitalSignature
      - keyEncipherment
      - keyCertSign
      - cRLSign
      key_usage_critical: yes
      extended_key_usage:
      - clientAuth
      - serverAuth
      extended_key_usage_critical: yes

  - name: Generate self-signed certificate
    community.crypto.x509_certificate:
      path: "{{ certdir }}/{{ partyid }}-cert.pem"
      privatekey_path: "{{ certdir }}/{{ partyid }}-key.pem"
      csr_path: "{{ certdir }}/{{ partyid }}.csr"
      provider: selfsigned

- name: Process other request
  when: partytype != 'ca'
  block:
  - name: Generate CSRs
    when: partytype != 'ca'
    community.crypto.openssl_csr:
      path: "{{ certdir }}/{{ partyid }}.csr"
      privatekey_path: "{{ certdir }}/{{ partyid }}-key.pem"
      subject:
        OU: "{{ partytype | lower }}"
        O: "{{ organization }}"
      subject_alt_name: '{{ sans }}'
      common_name: "{{ partycn }}"
      basic_constraints_critical: yes
      basic_constraints: 
      - 'CA:FALSE'
      key_usage:
      - digitalSignature
      key_usage_critical: yes

  - name: Select sign key
    set_fact:
      signing: "{{ (partytls == True)|ternary('tls-', 'ca-') }}"

  - name: Generate signed certificate based on CSRs
    community.crypto.x509_certificate:
      path: "{{ certdir }}/{{ partyid }}-cert.pem"
      csr_path: "{{ certdir }}/{{ partyid }}.csr"
      ownca_content: "{{ cadata[signing+'cert.pem'] | b64decode }}"
      ownca_privatekey_content: "{{ cadata[signing+'key.pem'] | b64decode }}"
      provider: ownca
