---
- name: Generate a private keys
  community.crypto.openssl_privatekey:
    path: "{{ certdir }}/{{ mspid }}-{{ item }}-key.pem"
    curve: secp256r1
    type: ECC
  with_items:
  - "ca"
  - "tls"

- name: Generate CSRs
  community.crypto.openssl_csr:
    path: "{{ certdir }}/{{ mspid }}-{{ item }}.csr"
    privatekey_path: "{{ certdir }}/{{ mspid }}-{{ item }}-key.pem"
    subject:
      O: "{{ organization }}"
    subject_alt_name: "DNS:{{ nodename }},DNS:{{ istio_hostname }}"
    common_name: "{{ istio_hostname }}"
    basic_constraints_critical: yes
    basic_constraints: 
    - 'CA:TRUE'
    key_usage:
    - digitalSignature
    - keyEncipherment
    - keyCertSign
    - cRLSign
    key_usage_critical: yes
    extended_key_usage:
    - clientAuth
    - serverAuth
    extended_key_usage_critical: yes
  with_items:
  - "ca"
  - "tls"

- name: Generate certificates based on CSRs
  community.crypto.x509_certificate:
    path: "{{ certdir }}/{{ mspid }}-{{ item }}-cert.pem"
    privatekey_path: "{{ certdir }}/{{ mspid }}-{{ item }}-key.pem"
    csr_path: "{{ certdir }}/{{ mspid }}-{{ item }}.csr"
    provider: selfsigned
  with_items:
  - "ca"
  - "tls"

- name: Create nodecert secret
  community.kubernetes.k8s:
    definition:
      kind: Secret
      apiVersion: v1
      metadata:
        name: '{{ nodecertsecretname }}'
        namespace: '{{ ansible_operator_meta.namespace }}'
        labels:
          fabric-node-type: CA
          fabric-organization: '{{ organization }}'
      type: Opaque
      data:
        ca-cert.pem: "{{ lookup('file', certdir+'/'+mspid+'-ca-cert.pem', errors='ignore') | b64encode }}"
        ca-key.pem: "{{ lookup('file', certdir+'/'+mspid+'-ca-key.pem', errors='ignore') | b64encode }}"
        tls-cert.pem: "{{ lookup('file', certdir+'/'+mspid+'-tls-cert.pem', errors='ignore') | b64encode }}"
        tls-key.pem: "{{ lookup('file', certdir+'/'+mspid+'-tls-key.pem', errors='ignore') | b64encode }}"
        adminid: "{{ lookup('community.general.random_string', length=8, special=false) | b64encode }}"
        adminpw: "{{ lookup('community.general.random_string', length=12, special=false) | b64encode }}"
