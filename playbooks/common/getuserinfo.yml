# This module retrieves a user's nodecert secret
- name: Search for the matching node cert
  community.kubernetes.k8s_info:
    kind: Nodecert
    api_version: 'operator.fabric.hyperledger.org/v1alpha1'
    name: '{{ node_cert }}'
    namespace: '{{ ansible_operator_meta.namespace }}'
  register: usernodecert

- name: Update the agent status
  when: (usernodecert.resources|length) == 0
  include_tasks: 'endplay.yml'
  vars:
    RESULT_MSG: 'Failed - Node cert {{node_cert}} not found'
    KIND: "{{ KIND }}"

- name: Search for the matching secret for the nodecert
  community.kubernetes.k8s_info:
    kind: Secret
    api_version: v1
    name: '{{ node_cert }}-{{ orgid }}-nodecert'
    namespace: '{{ ansible_operator_meta.namespace }}'
  register: usersecret

- name: Update the agent status
  when: (usersecret.resources|length) == 0
  include_tasks: 'endplay.yml'
  vars:
    RESULT_MSG: 'Failed - Secret {{ node_cert }}-{{ orgid }}-nodecert not found'
    KIND: "{{ KIND }}"

# lay out these certificates
- name: Set up user msp directory
  file:
    path: '{{ targetdir }}/{{ item }}'
    state: 'directory'
    mode: 0775
  with_items:
  - 'user'
  - 'user/msp'
  - 'user/msp/cacerts'
  - 'user/msp/keystore'
  - 'user/msp/signcerts'
  - 'user/msp/tlscacerts'
  - 'user/tls'

- name: Write certs to the correct location
  copy:
    content: '{{ usersecret.resources[0].data[item.src]|b64decode }}'
    dest: '{{ targetdir }}/user/{{ item.dest }}'
  with_items:
  - "{{ { 'src': 'ca.crt',      'dest': 'msp/cacerts/ca.pem'} }}"
  - "{{ { 'src': 'cert',        'dest': 'msp/signcerts/user.crt'} }}"
  - "{{ { 'src': 'key',         'dest': 'msp/keystore/prive_sk'} }}"
  - "{{ { 'src': 'tlsca.crt',   'dest': 'msp/tlscacerts/ca.crt'} }}"
  - "{{ { 'src': 'tlsca.crt',   'dest': 'tls/ca.crt'} }}"
  - "{{ { 'src': 'tls.crt',     'dest': 'tls/client.crt'} }}"
  - "{{ { 'src': 'tls.key',     'dest': 'tls/client.key'} }}"

- name: Create the config.yaml file
  copy:
    dest: "{{ targetdir }}/user/msp/config.yaml"
    content: >-
      NodeOUs:
        Enable: true
        ClientOUIdentifier:
          Certificate: cacerts/ca.pem
          OrganizationalUnitIdentifier: client
        PeerOUIdentifier:
          Certificate: cacerts/ca.pem
          OrganizationalUnitIdentifier: peer
        AdminOUIdentifier:
          Certificate: cacerts/ca.pem
          OrganizationalUnitIdentifier: admin
        OrdererOUIdentifier:
          Certificate: cacerts/ca.pem
          OrganizationalUnitIdentifier: orderer
