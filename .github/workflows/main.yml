name: Fabric Operator CI

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        fabric: ['2.2.3']
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Start up kind k8s cluster
        uses: helm/kind-action@v1.2.0
        with:
          cluster_name: kind

      - name: Label node and deploy metallb
        run: |
          kubectl label nodes kind-control-plane ingress-ready="true"
          kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.4/config/manifests/metallb-native.yaml

      - name: Wait for the metallb to be ready
        run: |
          while : ; do
            res=$(kubectl wait --context "kind-kind" -n metallb-system pod \
            -l component=controller,app=metallb --for=condition=Ready --timeout=120s 2>/dev/null ||true)
            if [[ "${res}" == *"condition met"* ]]; then
              break
            fi
            echo 'Waiting for metallb to be ready...'
            sleep 15
          done

      - name: Setup metallb public ip range
        run: |
          PREFIX=$(docker network inspect -f '{{range .IPAM.Config }}{{ .Gateway }}{{end}}' kind | cut -d '.' -f1,2)
          cat <<EOF | kubectl apply -f -
          apiVersion: metallb.io/v1beta1
          kind: IPAddressPool
          metadata:
            namespace: metallb-system
            name: address-pool
          spec:
            addresses:
            - $PREFIX.255.230-$PREFIX.255.240
          EOF

      - name: Deploy the nginx ingress controller
        run: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.3.0/deploy/static/provider/cloud/deploy.yaml

      - name: Wait for the controller to have the external IP
        run: |
          for ((x=0;x<30;x++)); do
            ENDPOINT=$(kubectl get -n ingress-nginx service/ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress}')
            if [[ ! -z $ENDPOINT ]]; then
              break
            fi
            echo -e ${Green}Waiting${ColorOff} for Nginx Ingress Controller to be ready...
            sleep 5
          done

      - name: 'Build Fabric operator container image'
        run: make docker-build IMG=email4tong/fabricop:v2.0.0

      - name: 'Upload the container image to k8s cluster'
        run: kind load docker-image email4tong/fabricop:v2.0.0 --name kind

      - name: Build chaincode image
        run: |
          cd utilities/chaincode/simple
          docker build -t email4tong/simple:v2.0.0 .

      - name: 'Upload the chaincode container image to k8s cluster'
        run: kind load docker-image email4tong/simple:v2.0.0 --name kind

      - name: Deploy Fabric Operator Controller
        run: kubectl apply -f deploy/fabric_operator.yaml

      - name: Deploy Fabric Operator CA node
        run: kubectl apply -f config/samples/operator_v1alpha1_ca.yaml

      - name: Wait for the CA pod to exist
        run: |
          for ((x=0;x<60;x++)); do
            capod=$(kubectl get pod ca-sample-0||true)
            if [[ ! -z $capod ]]; then
              break
            fi
            echo -e ${Green}Waiting${ColorOff} for CA pod to exist...
            sleep 5
          done

      - name: Wait for CA node to be fully ready
        run: kubectl wait --for=condition=ready --timeout=60s pod/ca-sample-0

  dockerhub:
    name: Docker
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}

    steps:
    - name: Checkout sources
      uses: actions/checkout@v2
      
    - name: Build operator controller image
      run: make docker-build IMG=email4tong/fabricop:v2.0.0
 
    - name: Build chaincode image
      run: |
        cd utilities/chaincode/simple
        docker build -t email4tong/simple:v2.0.0 .

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DH_USER }}
        password: ${{ secrets.DH_KEY }}
 
    - run: docker push email4tong/fabricop:v2.0.0
    - run: docker push email4tong/simple:v2.0.0
